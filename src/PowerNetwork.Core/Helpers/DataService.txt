using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Odbc;
using System.Globalization;
using System.Linq;
using PowerNetwork.Core.DataModels;

namespace PowerNetwork.Core.Helpers {
    public class DataService {
        private static readonly string ConnectionString = ConfigurationManager.AppSettings["RedshiftDb"];

        public static List<MeterModel> Meters(string groupCode) {
            var result = new List<MeterModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select m.cups, m.tipo_punto 
                    from coordenadas_acometida g
                    join datos_geograficos_cups m on g.cups = m.cups
                    where g.clave_acometida = ?", connection);

                command.Parameters.Add("GroupCode", OdbcType.Double).Value = double.Parse(groupCode);

                connection.Open();
                
                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    var model = new MeterModel { Code = reader["cups"] as string, Type = reader["tipo_punto"] as string };
                    result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static List<MeterGroupModel> MeterGroups(string otherCode) {
            var result = new List<MeterGroupModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select clave_acometida, log_sexadecimal, lat_sexadecimal, matricula_salidabt 
                    from coordenadas_acometida where matricula_ct = ?", connection);

                command.Parameters.Add("OtherCode", OdbcType.VarChar).Value = otherCode;

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    var model = new MeterGroupModel {
                        Code = ((double) reader["clave_acometida"]).ToString(),
                        Lng = (double) reader["log_sexadecimal"],
                        Lat = (double) reader["lat_sexadecimal"],
                        Exit = reader.IsDBNull(3) ? "" : reader["matricula_salidabt"] as string
                    };
                    if (result.All(o => o.Code != model.Code)) result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static string CtFromMeterCode(string meterCode) {
            var result = "";

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand("select top 1 matricula_ct from datos_geograficos_cups where cups like ?", connection);
                command.Parameters.Add("MeterCode", OdbcType.VarChar).Value = "%" + meterCode + "%";

                connection.Open();
                
                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    result = reader["matricula_ct"] as string;
                }

                reader.Close();
            }

            return result;
        }

        public static List<AlarmModel> OverloadAlarms() {
            var result = new List<AlarmModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select matricula, ratio, potencia_instaladatotal, intervalo 
                    from a1_balance_alarma_final_prueba1 order by ratio desc", connection);

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    var model = new AlarmModel {
                        Code = reader["matricula"] as string, 
                        Ratio = (double)((decimal)reader["ratio"]),
                        Data = new[] {
                            reader.IsDBNull(2) ? "" : ((double)reader["potencia_instaladatotal"]).ToString(CultureInfo.InvariantCulture), 
                            reader["intervalo"] as string
                        }
                    };

                    result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static List<AlarmModel> UnbalanceAlarms() {
            var result = new List<AlarmModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select matricula, dif_prc_hora_desbalaceo_sobre_nominal 
                    from balance_alarma_desbalanceo_final 
                    order by dif_prc_hora_desbalaceo_sobre_nominal desc", connection);

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    var model = new AlarmModel { Code = reader["matricula"] as string, Ratio = (double)reader["dif_prc_hora_desbalaceo_sobre_nominal"] };
                    result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static List<AlarmModel> FraudAlarms() {
            var result = new List<AlarmModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select matricula, med_dif_energia_ct_sal
                    from tabla_diferencias_fraude order by med_dif_energia_ct_sal desc", connection);

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    var model = new AlarmModel { Code = reader["matricula"] as string, Ratio = (double) reader["med_dif_energia_ct_sal"] };
                    result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static List<IntensityModel> Intensity(string code, DateTime from, DateTime to, string exit) {
            var result = new List<IntensityModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                OdbcCommand command;

                if (exit == "max") {
                    command = new OdbcCommand(
                        @"select fecha, horas, fase_r, fase_s, fase_t 
                        from a1_curva_intesidad_sobrecarga 
                        where matricula = ? and fecha >= ? and fecha <= ? and tpo_salida_max = 1", connection);

                    command.Parameters.Add("Code", OdbcType.VarChar).Value = code;
                    command.Parameters.Add("From", OdbcType.DateTime).Value = from;
                    command.Parameters.Add("To", OdbcType.DateTime).Value = to;

                } else {
                    command = new OdbcCommand(
                        @"select fecha, horas, fase_r, fase_s, fase_t 
                        from a1_curva_intesidad_sobrecarga 
                        where matricula = ? and fecha >= ? and fecha <= ? and salida = ?", connection);

                    command.Parameters.Add("Code", OdbcType.VarChar).Value = code;
                    command.Parameters.Add("From", OdbcType.DateTime).Value = from;
                    command.Parameters.Add("To", OdbcType.DateTime).Value = to;
                    command.Parameters.Add("Exit", OdbcType.VarChar).Value = exit.ToUpperInvariant();
                }

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    if (reader.IsDBNull(1)) continue;

                    var model = new IntensityModel {
                        Date = (DateTime) reader["fecha"],
                        Hour = (int) reader["horas"],
                        R = reader.IsDBNull(2) ? 0 : (double) reader["fase_r"],
                        S = reader.IsDBNull(3) ? 0 : (double) reader["fase_s"],
                        T = reader.IsDBNull(4) ? 0 : (double) reader["fase_t"]
                    };

                    // TODO: temp fix for incorrect horas from db
                    if (model.Hour < 24) result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static List<HistogramModel> Histogram(string code, DateTime from, DateTime to, string exit) {
            var result = new List<HistogramModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                OdbcCommand command;

                if (exit == "max") {
                    command = new OdbcCommand(
                        @"select fecha, fase, prc_nominal, num_horas
                        from a1_balance_prc_nominal_bcg_04_prueba1 
                        where matricula = ? and fecha >= ? and fecha <= ? and fase <> 'TODAS FASES' and tpo_salida_max = 1", connection);

                    command.Parameters.Add("Code", OdbcType.VarChar).Value = code;
                    command.Parameters.Add("From", OdbcType.DateTime).Value = from;
                    command.Parameters.Add("To", OdbcType.DateTime).Value = to;

                } else {
                    command = new OdbcCommand(
                        @"select fecha, fase, prc_nominal, num_horas
                        from a1_balance_prc_nominal_bcg_04_prueba1 
                        where matricula = ? and fecha >= ? and fecha <= ? and fase <> 'TODAS FASES' and salida = ?", connection);

                    command.Parameters.Add("Code", OdbcType.VarChar).Value = code;
                    command.Parameters.Add("From", OdbcType.DateTime).Value = from;
                    command.Parameters.Add("To", OdbcType.DateTime).Value = to;
                    command.Parameters.Add("Exit", OdbcType.VarChar).Value = exit.ToUpperInvariant();
                }

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    if (reader.IsDBNull(1) || reader.IsDBNull(2) || reader.IsDBNull(3)) continue;

                    var model = new HistogramModel {
                        Date = (DateTime)reader["fecha"],
                        Fase = (string)reader["fase"],
                        Threshold = Math.Round((double) reader["prc_nominal"]),
                        Count = (long)reader["num_horas"]
                    };
                    result.Add(model);
                }

                reader.Close();
            }

            return result;
        }

        public static string MaxExit(string code) {
            var result = string.Empty;

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select top 1 salida
                    from a1_balance_prc_nominal_bcg_04_prueba1 
                    where matricula = ? and tpo_salida_max = 1", connection);

                command.Parameters.Add("Code", OdbcType.VarChar).Value = code;

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    if (reader.IsDBNull(0)) continue;
                    result = reader["salida"] as string;
                }

                reader.Close();
            }

            return result;
        }

        public static List<FraudModel> Fraud(string code, DateTime from, DateTime to) {
            var result = new List<FraudModel>();

            using (var connection = new OdbcConnection(ConnectionString)) {
                var command = new OdbcCommand(
                    @"select fecha, energia_g03, sum_energia_imp_salidas 
                    from grafica_serie_fraude 
                    where matricula = ? and fecha >= ? and fecha <= ?
                    order by fecha", connection);

                command.Parameters.Add("Code", OdbcType.VarChar).Value = code;
                command.Parameters.Add("From", OdbcType.DateTime).Value = from;
                command.Parameters.Add("To", OdbcType.DateTime).Value = to;

                connection.Open();

                var reader = command.ExecuteReader();
                while (reader.Read()) {
                    if (reader.IsDBNull(1) || reader.IsDBNull(2)) continue;

                    var model = new FraudModel {
                        Date = (DateTime)reader["fecha"],
                        Ct = (long)reader["energia_g03"],
                        Exit = (double)reader["sum_energia_imp_salidas"]
                    };

                    result.Add(model);
                }

                reader.Close();
            }

            return result;
        }
    }
}
