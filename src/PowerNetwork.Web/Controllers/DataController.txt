using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.Mvc;
using FileHelpers;
using PowerNetwork.Core.Helpers;
using PowerNetwork.Web.Models;

namespace PowerNetwork.Web.Controllers {
    public class DataController : Controller {

        private static CtsRegionModel[] _ctsRegions;
        private static CtsCityModel[] _ctsCities;
        private static CtsCenterModel[] _ctsCenters;

        public ActionResult Common() {
            if (_ctsRegions == null) {
                var engine = new FileHelperEngine<CtsRegionModel>();
                _ctsRegions = engine.ReadFile(Server.MapPath("~/Content/data/region_v1.2.csv"));
            }

            if (_ctsCities == null) {
                var engine = new FileHelperEngine<CtsCityModel>();
                _ctsCities = engine.ReadFile(Server.MapPath("~/Content/data/city_v1.2.csv"));
            }

            if (_ctsCenters == null) {
                var engine = new FileHelperEngine<CtsCenterModel>();
                _ctsCenters = engine.ReadFile(Server.MapPath("~/Content/data/center_v1.2.csv"));
            }

            return
                Json(
                    new {
                        regions = _ctsRegions,
                        cities = _ctsCities,
                        centers = _ctsCenters
                    }, JsonRequestBehavior.AllowGet);
        }

        private static CtsModel[] _ctsItems;

        public ActionResult Cts(double x1, double x2, double y1, double y2) {
            if (_ctsItems == null) {
                var engine = new FileHelperEngine<CtsModel>();
                _ctsItems = engine.ReadFile(Server.MapPath("~/Content/data/cts_v1.2.csv"));
            }

            return Json(_ctsItems.Where(o => o.lng > x1 && o.lng < x2 && o.lat > y1 && o.lat < y2).ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult CtsSearch(string code) {
            if (_ctsItems == null) {
                var engine = new FileHelperEngine<CtsModel>();
                _ctsItems = engine.ReadFile(Server.MapPath("~/Content/data/cts_v1.2.csv"));
            }

            return Json(_ctsItems.Where(o => o.code == code || o.othercode == code).Take(1).ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult MeterSearch(string code) {
            if (_ctsItems == null) {
                var engine = new FileHelperEngine<CtsModel>();
                _ctsItems = engine.ReadFile(Server.MapPath("~/Content/data/cts_v1.2.csv"));
            }

            var ctCode = DataService.CtFromMeterCode(code);
            return Json(_ctsItems.Where(o => o.othercode == ctCode).Take(1).ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult MeterGroups(string otherCode, bool exitCalc) {
            var groups = DataService.MeterGroups(otherCode);

            var exitCodes = new List<int>();
            var exitMax = string.Empty;

            if (exitCalc) {
                var exits = groups.Select(o => o.Exit).Distinct().ToList();
                
                foreach (var exit in exits) {
                    int exitCode;
                    if (int.TryParse(exit, out exitCode)) {
                        if (exitCode > 0 && exitCode <= 24) exitCodes.Add(exitCode);
                    }
                }

                exitCodes.Sort();

                exitMax = DataService.MaxExit(otherCode);
            }

            return Json(new { groups, exits = exitCodes, exitMax }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Meters(string groupCode) {
            return Json(DataService.Meters(groupCode), JsonRequestBehavior.AllowGet);
        }

        public ActionResult Alarms(string region, string city, string center, string code) {
            var overloadAlarms = DataService.OverloadAlarms();
            var unbalanceAlarms = DataService.UnbalanceAlarms();

            if (_ctsItems == null) {
                var engine = new FileHelperEngine<CtsModel>();
                _ctsItems = engine.ReadFile(Server.MapPath("~/Content/data/cts_v1.2.csv"));
            }

            var overload = new List<dynamic>();
            foreach (var overloadAlarm in overloadAlarms) {
                var cts = _ctsItems.FirstOrDefault(o => o.othercode == overloadAlarm.Code);

                if (cts == null) continue;
                if (!string.IsNullOrEmpty(center) && cts.center != center) continue;
                if (!string.IsNullOrEmpty(city) && cts.city != city) continue;
                if (string.IsNullOrEmpty(city) && !string.IsNullOrEmpty(region) && cts.region != region) continue;
                if (string.IsNullOrEmpty(center) && string.IsNullOrEmpty(region) && !string.IsNullOrEmpty(code) && cts.othercode != code) continue;

                cts.alarm = "o";
                overload.Add(new { code = overloadAlarm.Code, ratio = overloadAlarm.Ratio, data = overloadAlarm.Data, cts });
            }

            var unbalance = new List<dynamic>();
            foreach (var unbalanceAlarm in unbalanceAlarms) {
                var cts = _ctsItems.FirstOrDefault(o => o.othercode == unbalanceAlarm.Code);

                if (cts == null) continue;
                if (!string.IsNullOrEmpty(center) && cts.center != center) continue;
                if (!string.IsNullOrEmpty(city) && cts.city != city) continue;
                if (string.IsNullOrEmpty(city) && !string.IsNullOrEmpty(region) && cts.region != region) continue;
                if (string.IsNullOrEmpty(center) && string.IsNullOrEmpty(region) && !string.IsNullOrEmpty(code) && cts.othercode != code) continue;

                cts.alarm = cts.alarm == "o" ? "ob" : "b";
                unbalance.Add(new { code = unbalanceAlarm.Code, ratio = unbalanceAlarm.Ratio, cts });
            }

            return Json(new { overload, unbalance }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult FraudAlarms(string region, string city, string center, string code) {
            var alarms = DataService.FraudAlarms();

            if (_ctsItems == null) {
                var engine = new FileHelperEngine<CtsModel>();
                _ctsItems = engine.ReadFile(Server.MapPath("~/Content/data/cts_v1.2.csv"));
            }

            var joinedAlarms = from a in alarms join c in _ctsItems on a.Code equals c.othercode select new { alarm = a, cts = c };

            if (!string.IsNullOrEmpty(center)) joinedAlarms = joinedAlarms.Where(o => o.cts.center == center);
            if (!string.IsNullOrEmpty(city)) joinedAlarms = joinedAlarms.Where(o => o.cts.city == city);
            if (string.IsNullOrEmpty(city) && !string.IsNullOrEmpty(region)) joinedAlarms = joinedAlarms.Where(o => o.cts.region == region);
            if (string.IsNullOrEmpty(center) && string.IsNullOrEmpty(region) && !string.IsNullOrEmpty(code)) joinedAlarms = joinedAlarms.Where(o => o.cts.othercode == code);

            var unbalance = new List<dynamic>();
            foreach (var unbalanceAlarm in joinedAlarms) {
                unbalance.Add(new { code = unbalanceAlarm.alarm.Code, ratio = unbalanceAlarm.alarm.Ratio, unbalanceAlarm.cts.lat, unbalanceAlarm.cts.lng });
            }

            return new JsonResult {
                Data = unbalance,
                ContentType = "application/json",
                ContentEncoding = Encoding.UTF8,
                JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                MaxJsonLength = 10240000
            };
        }

        private static IntensityCsvModel[] _intensityCsvItems;

        public ActionResult Intensity(string code, int mode, DateTime from, DateTime to, string exit) {
            if (_intensityCsvItems == null) {
                var engine = new FileHelperEngine<IntensityCsvModel>();
                _intensityCsvItems = engine.ReadFile(Server.MapPath("~/Content/data/intensity.txt"));
            }

            var items = _intensityCsvItems.Where(o => o.Exit == exit && o.Date >= from && o.Date <= to).ToList();

            var result = new List<IntensityOutModel>();

            foreach (var item in items) {
                result.Add(new IntensityOutModel { date = item.Date.ToString("yyyy-MM-dd") + " " + item.Hour + ":00:00", r = item.R, s = item.S, t = item.T });
            }

            return Json(new { items = result }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Intensity2(string code, int mode, DateTime from, DateTime to, string exit) {
            var items = DataService.Intensity(code, from, to, exit).OrderBy(o => o.Date).ThenBy(o => o.Hour).ToList();

            var result = new List<IntensityOutModel>();

            foreach (var item in items) {
                result.Add(new IntensityOutModel { date = item.Date.ToString("yyyy-MM-dd") + " " + item.Hour + ":00:00", r = item.R, s = item.S, t = item.T });
            }

            return Json(new { items = result }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Histogram(string code, DateTime from, DateTime to, string exit) {
            var items = DataService.Histogram(code, from, to, exit);

            var result = new List<HistogramOutModel>();

            if (items.Count > 0) {
                var maxThreshold = items.Max(o => o.Threshold);
                var minThreshold = items.Min(o => o.Threshold);

                for (var i = minThreshold; i < maxThreshold; i += 1) {
                    var resultItem = new HistogramOutModel {
                        threshold = (int)i,
                        r = items.Where(o => o.Fase == "FASE_R" && (int)o.Threshold == i).Sum(o => (int)o.Count),
                        s = items.Where(o => o.Fase == "FASE_S" && (int)o.Threshold == i).Sum(o => (int)o.Count),
                        t = items.Where(o => o.Fase == "FASE_T" && (int)o.Threshold == i).Sum(o => (int)o.Count)
                    };

                    result.Add(resultItem);
                }
            }

            return Json(new { items = result }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Fraud(string code, DateTime from, DateTime to) {
            var items = DataService.Fraud(code, from, to);

            var result = new List<FraudOutModel>();

            foreach (var item in items) {
                result.Add(new FraudOutModel { date = item.Date.ToString("yyyy-MM-dd"), ct = item.Ct, exit = item.Exit});
            }

            return Json(new { items = result }, JsonRequestBehavior.AllowGet);
        }

    }
}